{"mappings":"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","sources":["src/ConfigContext.tsx","src/Label.tsx","src/Toggle.tsx","src/FormField.tsx","src/MaxLength.tsx","src/TextField.tsx","src/TextAreaField.tsx","src/FormItem.tsx","src/DateField.tsx","src/NumberField.tsx","src/TelephoneField.tsx","src/UploadField.tsx","src/Button.tsx","src/Fieldset.tsx","src/ComplexMultipleField.tsx","src/SelectField.tsx","src/ChoiceField.tsx","src/Field.tsx","src/ButtonRow.tsx","src/Heading.tsx","src/Form.tsx","src/utils.ts","src/ApplicationForm.tsx"],"sourcesContent":["import React = require(\"react\");\n\nexport const DEFAULT_FORM_CONFIG: FormConfigType = {\n  telephoneInitialCountry: \"US\",\n  telephonePreferredCountries: [\"us\", \"gb\", \"ca\", \"de\", \"au\"],\n  telephoneAllowDropdown: true,\n  telephoneAutoHideDialCode: false,\n  telephoneAutoPlaceholder: \"polite\",\n  telephoneCustomContainer: \"\",\n  telephoneCustomPlaceholder: null,\n  telephoneDropdownContainer: null,\n  telephoneExcludeCountries: [],\n  telephoneFormatOnDisplay: true,\n  telephoneGeoIpLookup: null,\n  telephoneHiddenInput: \"\",\n  telephoneLocalizedCountries: null,\n  telephoneNationalMode: false,\n  telephoneOnlyCountries: [],\n  telephonePlaceholderNumberType: \"MOBILE\",\n  telephoneSeparateDialCode: true,\n\n  // labels\n  labelForm: \"Application\",\n  labelSubmit: \"Submit application\",\n  labelAdd: \"Add\",\n  labelSave: \"Save\",\n  labelCancel: \"Cancel\",\n  labelEdit: \"Edit\",\n  labelDelete: \"Delete\",\n  labelClose: \"Close\",\n  labelOptional: \"(optional)\",\n  labelClear: \"Clear\",\n\n  // dropzone\n  labelDropzoneUpload: \"Upload a file\",\n  labelDropzoneDragDrop: \"or drag and drop here\",\n  labelDropzoneMaxSize: \"Max file size is \",\n  labelDropzoneAcceptableFileTypes: \"Acceptable file types: \",\n  labelDropzoneReplaceFile: \"Replace file\",\n  labelDropzoneNoFilesAccepted: \"No files accepted\",\n  labelDropzoneAborted: \"File reading was aborted\",\n  labelDropzoneError: \"File reading has failed\",\n\n  // icons\n  iconCancel: () => (\n    <svg\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={24}\n      height={24}\n    >\n      <path\n        d=\"M7.7574 7.7574 12 12.0001m0 0 4.2426 4.2426M12 12.0001l4.2426-4.2427M12 12.0001l-4.2426 4.2426\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n    </svg>\n  ),\n  iconCheck: () => (\n    <svg\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={24}\n      height={24}\n    >\n      <path\n        d=\"M6.5 12.5 10 16l7.5-7.5\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n    </svg>\n  ),\n  iconEdit: () => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n    >\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        d=\"M9 6.75H4.75v12.5h12.5V15\"\n      ></path>\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        d=\"M17.5 4.25l-7.25 7.25v2.75H13l7.24-7.26 -2.75-2.75Z\"\n      ></path>\n    </svg>\n  ),\n  iconDelete: () => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n    >\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        d=\"M7.25 7.75h9.5m-9.5 0v10.5h9.5V7.75m-9.5 0H5m11.75 0H19m-4.75 0v-3h-4.5v3\"\n      ></path>\n    </svg>\n  ),\n  iconClear: () => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n    >\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        d=\"M7.25 7.75h9.5m-9.5 0v10.5h9.5V7.75m-9.5 0H5m11.75 0H19m-4.75 0v-3h-4.5v3\"\n      ></path>\n    </svg>\n  ),\n};\n\nexport const ConfigContext = React.createContext(DEFAULT_FORM_CONFIG);\n","import React = require(\"react\");\nimport { ConfigContext } from \"./ConfigContext\";\n\ntype LabelProps = {\n  label: React.ReactElement | React.ReactNode;\n  slug: string;\n  required: boolean;\n};\n\nexport const Label: React.ComponentType<LabelProps> = ({\n  label,\n  required,\n  slug,\n}) => {\n  const config = React.useContext(ConfigContext);\n\n  return (\n    <div className=\"form-label-wrapper\">\n      <label className=\"form-label\" htmlFor={`field-${slug}`}>\n        {label}\n        {required ? (\n          <span className=\"form-label__required\">*</span>\n        ) : (\n          <span className=\"form-label__optional\">{config.labelOptional}</span>\n        )}\n      </label>\n    </div>\n  );\n};\n","import { useContext } from \"react\";\nimport { Label } from \"./Label\";\nimport { ConfigContext } from \"./ConfigContext\";\n\ntype ToggleProps = {\n  label: React.ReactNode;\n  slug: string;\n} & FormFieldType;\n\nexport const Toggle: React.ComponentType<ToggleProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  label,\n  slug,\n}) => {\n  const config = useContext(ConfigContext);\n  return (\n    <div className=\"toggle-wrapper\">\n      <div className=\"toggle\">\n        <input\n          type=\"checkbox\"\n          name={name}\n          required={required}\n          id={id}\n          defaultChecked={Boolean(defaultValue)}\n          className=\"toggle__input\"\n        />\n        <span className=\"toggle__check\">{config.iconCheck()}</span>\n      </div>\n\n      <Label label={label} slug={slug} required={required} />\n    </div>\n  );\n};\n","type FormFieldProps = {\n  children: React.ReactNode;\n};\n\nexport const FormField: React.ComponentType<FormFieldProps> = ({\n  children,\n}) => {\n  return (\n    <div className=\"form-field\">\n      <div className=\"form-field__wrapper\">{children}</div>\n    </div>\n  );\n};\n","type MaxLengthProps = {\n  count?: number;\n  maxLength?: number;\n};\n\nexport const MaxLength = ({ count = 0, maxLength }) => {\n  if (!maxLength) return null;\n\n  return (\n    <span className=\"form-field__maxlength\">\n      {count} / {maxLength}\n    </span>\n  );\n};\n","import { useState } from \"react\";\nimport { FormField } from \"./FormField\";\nimport { MaxLength } from \"./MaxLength\";\n\ntype TextFieldProps = FormFieldType;\n\nexport const TextField: React.ComponentType<TextFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  maxLength,\n}) => {\n  const [value, setValue] = useState<string>(null);\n\n  return (\n    <FormField>\n      <input\n        type=\"text\"\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n        className=\"form-field__text\"\n        maxLength={maxLength}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setValue(e.target.value)\n        }\n      />\n      <MaxLength count={value?.length} maxLength={maxLength} />\n    </FormField>\n  );\n};\n","import { useState } from \"react\";\nimport { FormField } from \"./FormField\";\n\nimport { MaxLength } from \"./MaxLength\";\n\ntype TextAreaFieldProps = {} & FormFieldType;\n\nexport const TextAreaField: React.ComponentType<TextAreaFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  maxLength,\n}) => {\n  const [value, setValue] = useState<string>(null);\n  return (\n    <FormField>\n      <textarea\n        name={name}\n        required={required}\n        defaultValue={defaultValue}\n        id={id}\n        rows={5}\n        className=\"form-field__textarea\"\n        maxLength={maxLength}\n        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n          setValue(e.target.value)\n        }\n      />\n      <MaxLength count={value?.length} maxLength={maxLength} />\n    </FormField>\n  );\n};\n","type FormItemProps = {\n  children: React.ReactNode;\n};\n\nexport const FormItem: React.ComponentType<FormItemProps> = ({ children }) => {\n  return <div className=\"form-item\">{children}</div>;\n};\n","import { FormField } from \"./FormField\";\n\ntype DateFieldProps = FormFieldType;\n\nexport const DateField: React.ComponentType<DateFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n}) => {\n  return (\n    <FormField>\n      <input\n        type=\"date\"\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n        className=\"form-field__text form-field__date\"\n      />\n    </FormField>\n  );\n};\n","import { FormField } from \"./FormField\";\n\ntype NumberFieldProps = FormFieldType;\n\nexport const NumberField: React.ComponentType<NumberFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  maxLength,\n}) => {\n  return (\n    <FormField>\n      <input\n        type=\"number\"\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n        className=\"form-field__text form-field__number\"\n        maxLength={maxLength}\n      />\n    </FormField>\n  );\n};\n","type TelephoneFieldProps = {} & FormFieldType;\n\nimport intlTelInput from \"intl-tel-input\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { ConfigContext } from \"./ConfigContext\";\nimport { FormField } from \"./FormField\";\n\nexport const TelephoneField: React.ComponentType<TelephoneFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  maxLength,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const config = useContext(ConfigContext);\n  const [dialCode, setDialCode] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!inputRef.current) return;\n\n    const iti = intlTelInput(inputRef.current, {\n      initialCountry: config.telephoneInitialCountry,\n      allowDropdown: config.telephoneAllowDropdown,\n      autoHideDialCode: config.telephoneAutoHideDialCode,\n      autoPlaceholder: config.telephoneAutoPlaceholder,\n      customContainer: config.telephoneCustomContainer,\n      customPlaceholder: config.telephoneCustomPlaceholder,\n      dropdownContainer: config.telephoneDropdownContainer,\n      excludeCountries: config.telephoneExcludeCountries,\n      formatOnDisplay: config.telephoneFormatOnDisplay,\n      geoIpLookup: config.telephoneGeoIpLookup,\n      hiddenInput: config.telephoneHiddenInput,\n      localizedCountries: config.telephoneLocalizedCountries,\n      nationalMode: config.telephoneNationalMode,\n      onlyCountries: config.telephoneOnlyCountries,\n      placeholderNumberType: config.telephonePlaceholderNumberType,\n      preferredCountries: config.telephonePreferredCountries,\n      separateDialCode: config.telephoneSeparateDialCode,\n      utilsScript:\n        \"https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.19/js/utils.js\",\n    });\n\n    const onCountryChange = () => {\n      const countryData = iti.getSelectedCountryData();\n      setDialCode(countryData.dialCode);\n    };\n\n    onCountryChange();\n    inputRef.current.addEventListener(\"countrychange\", onCountryChange);\n\n    () => {\n      iti.destroy();\n      inputRef.current.removeEventListener(\"countrychange\", onCountryChange);\n    };\n  }, []);\n\n  return (\n    <FormField>\n      <input\n        type=\"tel\"\n        ref={inputRef}\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n        maxLength={maxLength}\n        className=\"form-field__text form-field__telephone\"\n      />\n      <input\n        type=\"hidden\"\n        name={`${name}_dialcode`}\n        value={dialCode}\n        readOnly\n      />\n    </FormField>\n  );\n};\n\nexport default TelephoneField;\n","import { useContext, useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\n\nimport { ConfigContext } from \"./ConfigContext\";\n\ntype UploadFieldProps = {\n  name: string;\n  field: WorkableFormField;\n};\n\nexport const UploadField: React.ComponentType<UploadFieldProps> = ({\n  name,\n  field,\n}) => {\n  const config = useContext(ConfigContext);\n\n  const IS_IMAGE = Boolean(\n    field.supported_file_types.filter((x) =>\n      [\"jpg\", \"jpeg\", \"gif\", \"png\"].includes(x),\n    ).length,\n  );\n\n  const [state, setState] = useState<\n    \"initial\" | \"loading\" | \"error\" | \"success\"\n  >(\"initial\");\n  const [image, setImage] = useState<null | { preview: string; name: string }>(\n    null,\n  );\n  const [message, setMessage] = useState<string>(\"\");\n\n  const [fileBase64, setFileBase64] = useState<string>(\"\");\n  const { acceptedFiles, getRootProps, getInputProps, inputRef } = useDropzone({\n    maxFiles: 1,\n    multiple: false,\n    maxSize: field.max_file_size,\n    accept: {\n      \"application/octet-stream\": field.supported_file_types.map(\n        (ext) => `.${ext}`,\n      ),\n    },\n    onDrop: (acceptedFiles) => {\n      setState(\"loading\");\n\n      if (!acceptedFiles.length) {\n        setMessage(config.labelDropzoneNoFilesAccepted);\n        setState(\"error\");\n        return;\n      }\n\n      acceptedFiles.forEach((file) => {\n        const reader = new FileReader();\n\n        reader.onabort = () => {\n          reset();\n          setMessage(config.labelDropzoneAborted);\n          setState(\"error\");\n        };\n        reader.onerror = () => {\n          reset();\n          setMessage(config.labelDropzoneError);\n          setState(\"error\");\n        };\n        reader.onload = () => {\n          setFileBase64(reader.result.toString().split(\"base64,\")[1]);\n          setState(\"success\");\n        };\n        reader.readAsDataURL(file);\n      });\n\n      setImage(\n        acceptedFiles.map((file) =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          }),\n        )[0],\n      );\n    },\n  });\n\n  const reset = () => {\n    if (image) URL.revokeObjectURL(image.preview);\n    setFileBase64(\"\");\n  };\n\n  useEffect(() => {\n    // Make sure to revoke the data uris to avoid memory leaks, will run on unmount\n    return () => reset();\n  }, []);\n\n  const onClear = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    acceptedFiles.length = 0;\n    acceptedFiles.splice(0, acceptedFiles.length);\n    inputRef.current.value = \"\";\n    setImage(null);\n    setState(\"initial\");\n    setMessage(\"\");\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        data-action=\"remove-entry\"\n        onClick={onClear}\n        style={{ display: \"none\" }}\n      />\n      <div {...getRootProps({ className: \"dropzone\" })} data-state={state}>\n        <input {...getInputProps()} />\n        <textarea\n          name={name}\n          style={{ display: \"none\" }}\n          data-filename={acceptedFiles?.[0]?.name}\n          value={fileBase64}\n          readOnly\n        />\n\n        {acceptedFiles.length > 0 ? (\n          <>\n            {IS_IMAGE && image && (\n              <img\n                style={{\n                  maxWidth: 240,\n                }}\n                key={image.name}\n                src={image.preview}\n                onLoad={() => {\n                  URL.revokeObjectURL(image.preview);\n                }}\n              />\n            )}\n            {!IS_IMAGE &&\n              acceptedFiles.map((file) => <p key={file.name}>{file.name}</p>)}\n            <p className=\"dropzone__label\">\n              <span>{config.labelDropzoneReplaceFile}</span>{\" \"}\n              {config.labelDropzoneDragDrop}\n            </p>\n          </>\n        ) : (\n          <>\n            <p className=\"dropzone__label\">\n              <span>{config.labelDropzoneUpload}</span>{\" \"}\n              {config.labelDropzoneDragDrop}\n            </p>\n            <p className=\"dropzone__info\">\n              {field.max_file_size &&\n                `${config.labelDropzoneMaxSize} ${Math.floor(\n                  field.max_file_size / 1000000,\n                )}Mb. Acceptable file types .\n              ${field.supported_file_types.join(\", .\")}.`}\n            </p>\n          </>\n        )}\n\n        {state === \"loading\" && (\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <style\n              dangerouslySetInnerHTML={{\n                __html: `\n                .spinner_b2T7{animation:spinner_xe7Q .8s linear infinite}.spinner_YRVV{animation-delay:-.65s}.spinner_c9oY{animation-delay:-.5s}@keyframes spinner_xe7Q{93.75%,100%{r:3px}46.875%{r:.2px}}`,\n              }}\n            />\n            <circle className=\"spinner_b2T7\" cx=\"4\" cy=\"12\" r=\"3\" />\n            <circle\n              className=\"spinner_b2T7 spinner_YRVV\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"3\"\n            />\n            <circle\n              className=\"spinner_b2T7 spinner_c9oY\"\n              cx=\"20\"\n              cy=\"12\"\n              r=\"3\"\n            />\n          </svg>\n        )}\n\n        {message && <p className=\"dropzone__message\">{message}</p>}\n      </div>\n    </>\n  );\n};\n\nexport default UploadField;\n","type ButtonProps = {\n  onClick?: () => void;\n  theme?: \"primary\" | \"secondary\" | \"tertiary\" | \"ghost\";\n  type?: \"button\" | \"submit\" | \"reset\";\n  children?: React.ReactNode;\n  style?: React.CSSProperties;\n  size?: \"md\" | \"lg\";\n  disabled?: boolean;\n  className?: string;\n};\n\nexport const Button: React.ComponentType<ButtonProps> = ({\n  onClick,\n  theme = \"primary\",\n  type = \"button\",\n  size = \"md\",\n  children,\n  style,\n  disabled,\n  className = \"\",\n  ...props\n}) => {\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      className={`button button--${theme} button--${size} button--${\n        disabled ? \"disabled\" : \"enabled\"\n      } ${className}`}\n      style={style}\n      disabled={disabled}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n","import { useContext, useRef } from \"react\";\nimport { Button } from \"./Button\";\nimport { ConfigContext } from \"./ConfigContext\";\n\ntype FieldsetProps = {\n  name?: string;\n  children: React.ReactNode;\n  displayClearButton?: boolean;\n};\nexport const Fieldset: React.ComponentType<FieldsetProps> = ({\n  name,\n  children,\n  displayClearButton = true,\n}) => {\n  const config = useContext(ConfigContext);\n  const fieldsetRef = useRef(null);\n\n  const onClear = () => {\n    const inputs = fieldsetRef.current.querySelectorAll(\n      \"input, textarea, select\",\n    );\n\n    inputs.forEach((input) => {\n      if (input.type === \"checkbox\" || input.type === \"radio\") {\n        input.checked = false;\n      } else {\n        input.value = \"\";\n      }\n      input.dispatchEvent(new Event(\"change\"));\n    });\n\n    const removeComplexMultipleEntries = fieldsetRef.current.querySelectorAll(\n      '[data-action=\"remove-entry\"]',\n    );\n    removeComplexMultipleEntries.forEach((button) => {\n      button.click();\n    });\n  };\n\n  return (\n    <fieldset className=\"form-fieldset\" ref={fieldsetRef}>\n      {name && (\n        <legend className=\"form-legend\">\n          <span className=\"form-legend__title\">{name}</span>\n          {displayClearButton && (\n            <span className=\"form-legend__clear\">\n              <Button type=\"button\" theme=\"ghost\" onClick={onClear}>\n                {config.iconClear()}\n                {config.labelClear}\n              </Button>\n            </span>\n          )}\n        </legend>\n      )}\n      {children}\n    </fieldset>\n  );\n};\n","import { useContext, useReducer, useRef, useState } from \"react\";\nimport { Field } from \"./Field\";\nimport { ConfigContext } from \"./ConfigContext\";\nimport * as Dialog from \"@radix-ui/react-dialog\";\nimport * as VisuallyHidden from \"@radix-ui/react-visually-hidden\";\nimport { Fieldset } from \"./Fieldset\";\nimport { Button } from \"./Button\";\n\ntype ComplexMultipleProps = {\n  name: string;\n  field: WorkableFormField;\n};\n\ntype ActionType = {\n  id: string;\n  type: \"add\" | \"remove\" | \"edit\";\n  data?: Record<string, FieldValueType>;\n};\n\ntype FieldValueType = {\n  key: string;\n  value: string;\n  label: string;\n};\n\nexport const ComplexMultiple: React.ComponentType<ComplexMultipleProps> = ({\n  name,\n  field,\n}) => {\n  const config = useContext(ConfigContext);\n  const [state, setState] = useState<\"initial\" | \"dialog\">(\"initial\");\n\n  const formRef = useRef<HTMLFormElement>(null);\n\n  const hiddenValueFieldRef = useRef<HTMLInputElement>(null);\n  const [editingEntryId, setEditingEntryId] = useState<string | null>(null);\n\n  const entryId = useRef<number>(0);\n\n  /**\n   * entries is an array of objects that looks like this:\n   * [{\n   *  id: \"entry-1\",\n   *  type: \"add\",\n   *  data: {\n   *  \"entry-1\": {\n   *    key: \"firstname\",\n   *    value: \"John\",\n   *    label: \"First Name\"\n   * }]\n   */\n\n  const [entries, updateEntries] = useReducer((data, action: ActionType) => {\n    const index = data.findIndex(({ id }) => id === action.id);\n    let newData = [...data];\n\n    switch (action.type) {\n      case \"add\":\n        return [...data, action];\n\n      case \"remove\":\n        newData.splice(index, 1);\n        return newData;\n\n      case \"edit\":\n        newData.splice(index, 1, action);\n        return newData;\n    }\n  }, []);\n\n  /**\n   * Save when the 'save' button is clicked\n   * it can either be a 'save' or an 'edit' action\n   */\n\n  const onSave = () => {\n    if (!hiddenValueFieldRef.current) return;\n    if (!formRef) return;\n\n    const formData = new FormData(formRef.current);\n    const data = Object.fromEntries(formData.entries());\n\n    const action: ActionType = !editingEntryId\n      ? {\n          id: `entry-${++entryId.current}`,\n          type: \"add\",\n          data: {},\n        }\n      : {\n          id: editingEntryId,\n          type: \"edit\",\n          data: {},\n        };\n\n    Object.entries(data).forEach(([key, value]: [string, string]) => {\n      const matchingField = field.fields.find((f) => f.key === key);\n\n      if (!value.trim().length) return;\n      action.data[key] = {\n        key: key,\n        value,\n        label: matchingField.label,\n      };\n    });\n    updateEntries(action);\n    setState(\"initial\");\n    setEditingEntryId(null);\n  };\n\n  return (\n    <>\n      <input\n        type=\"hidden\"\n        name={name}\n        value={JSON.stringify(entries)}\n        ref={hiddenValueFieldRef}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          updateEntries(JSON.parse(e.target.value))\n        }\n      />\n      {Boolean(entries.length) && (\n        <div className=\"complex-multiple__entries\">\n          {(entries as ActionType[]).map((entry) => {\n            return (\n              <div key={entry.id} className=\"complex-multiple__entry\">\n                <table className=\"complex-multiple__entry-table\">\n                  <tbody>\n                    {Object.entries(entry.data).map(\n                      ([key, value]: [string, FieldValueType]) => (\n                        <tr key={key}>\n                          <th>{value.label}</th>\n                          {value.value === \"on\" ? (\n                            <td>{config.iconCheck()}</td>\n                          ) : (\n                            <td>{value.value}</td>\n                          )}\n                        </tr>\n                      ),\n                    )}\n                  </tbody>\n                </table>\n\n                <div className=\"complex-multiple__entry-actions\">\n                  <Button\n                    type=\"button\"\n                    theme=\"ghost\"\n                    onClick={() => {\n                      setEditingEntryId(entry.id);\n                      setState(\"dialog\");\n                    }}\n                  >\n                    {config.iconEdit()}\n                    <VisuallyHidden.Root>\n                      {config.labelEdit}\n                    </VisuallyHidden.Root>\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    theme=\"ghost\"\n                    data-action=\"remove-entry\"\n                    onClick={() =>\n                      updateEntries({\n                        id: entry.id,\n                        type: \"remove\",\n                      })\n                    }\n                  >\n                    {config.iconDelete()}\n                    <VisuallyHidden.Root>\n                      {config.labelDelete}\n                    </VisuallyHidden.Root>\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      <div className=\"complex-multiple__add\">\n        <Button type=\"button\" onClick={() => setState(\"dialog\")}>\n          {config.labelAdd}\n        </Button>\n      </div>\n\n      <Dialog.Root open={state === \"dialog\"}>\n        <Dialog.Portal>\n          <Dialog.Overlay className=\"dialog-overlay\" />\n          <Dialog.Content\n            className=\"dialog-content application-form-dialog\"\n            onEscapeKeyDown={() => setState(\"initial\")}\n            onPointerDownOutside={() => setState(\"initial\")}\n            onInteractOutside={() => setState(\"initial\")}\n          >\n            <div className=\"dialog-content__form\">\n              <VisuallyHidden.Root asChild>\n                <Dialog.Title className=\"dialog-title\">\n                  {editingEntryId ? config.labelEdit : config.labelAdd}\n                </Dialog.Title>\n              </VisuallyHidden.Root>\n\n              <Button\n                aria-label={config.labelClose}\n                onClick={() => setState(\"initial\")}\n                theme=\"tertiary\"\n                className=\"dialog-content__close\"\n              >\n                {config.iconCancel()}\n              </Button>\n\n              <form className=\"complex-multiple__form\" ref={formRef}>\n                <Fieldset name={field.label} displayClearButton={false}>\n                  {field.fields.map((subfield) => {\n                    const editingEntry = {\n                      ...entries.find(({ id }) => id === editingEntryId),\n                    };\n                    return (\n                      <Field\n                        key={subfield.key}\n                        name={subfield.key}\n                        field={{\n                          ...subfield,\n                          name: subfield.key,\n                          label: subfield.label,\n                          slug: subfield.key,\n                          value:\n                            editingEntryId && editingEntry\n                              ? editingEntry.data[subfield.key]?.value\n                              : null,\n                        }}\n                      />\n                    );\n                  })}\n\n                  <div className=\"button-row\">\n                    <Button type=\"button\" onClick={() => onSave()}>\n                      {config.labelSave}\n                    </Button>\n\n                    <Button\n                      type=\"button\"\n                      theme=\"tertiary\"\n                      onClick={() => {\n                        setEditingEntryId(null);\n                        setState(\"initial\");\n                      }}\n                    >\n                      {config.labelCancel}\n                    </Button>\n                  </div>\n                </Fieldset>\n              </form>\n            </div>\n          </Dialog.Content>\n        </Dialog.Portal>\n      </Dialog.Root>\n    </>\n  );\n};\n\nexport default ComplexMultiple;\n","import { FormField } from \"./FormField\";\n\ntype SelectFieldProps = FormFieldType;\n\nexport const SelectField: React.ComponentType<SelectFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  choices,\n}) => {\n  return (\n    <FormField>\n      <select\n        className=\"form-field__select\"\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n      >\n        <option value={null}></option>\n        {choices?.map((choice) => {\n          return (\n            <option key={choice.id} value={choice.id}>\n              {choice.body}\n            </option>\n          );\n        })}\n      </select>\n    </FormField>\n  );\n};\n","type ChoiceFieldProps = { multiple?: boolean } & FormFieldType;\n\nexport const ChoiceField: React.ComponentType<ChoiceFieldProps> = ({\n  name,\n  required,\n  id,\n  choices,\n  multiple,\n}) => {\n  return (\n    <fieldset className=\"form-field__choice-fieldset\">\n      {choices?.map((choice) => {\n        return (\n          <div className=\"form-field__choice-wrapper\" key={choice.id}>\n            <input\n              type={multiple ? \"checkbox\" : \"radio\"}\n              name={name}\n              id={`${id}${choice.id}`}\n              value={choice.id}\n              className=\"form-field__choice\"\n            />\n            <label htmlFor={`${id}${choice.id}`}>{choice.body}</label>\n          </div>\n        );\n      })}\n    </fieldset>\n  );\n};\n","import React = require(\"react\");\nimport { Label } from \"./Label\";\nimport { Toggle } from \"./Toggle\";\nimport { TextField } from \"./TextField\";\nimport { TextAreaField } from \"./TextAreaField\";\nimport { FormItem } from \"./FormItem\";\nimport { DateField } from \"./DateField\";\nimport { NumberField } from \"./NumberField\";\n\nimport { TelephoneField } from \"./TelephoneField\";\nimport { UploadField } from \"./UploadField\";\nimport { ComplexMultiple } from \"./ComplexMultipleField\";\nimport { SelectField } from \"./SelectField\";\nimport { ChoiceField } from \"./ChoiceField\";\n\nexport type FieldProps = {\n  name: string;\n  field: (WorkableFormField | WorkableQuestion) & {\n    name: string;\n    slug: string;\n    label: React.ReactElement | React.ReactNode;\n    value?: string;\n  };\n};\n\nexport const Field: React.ComponentType<FieldProps> = ({ name, field }) => {\n  if (!field) {\n    console.log(`Missing field: ${name}`);\n    return null;\n  }\n\n  const inputProps: {\n    name: string;\n    required: boolean;\n    id: string;\n    defaultValue?: string;\n    maxLength?: number;\n    choices?: { body?: string; id?: string }[];\n    multiple?: boolean;\n  } = {\n    name: field.name,\n    required: field.required,\n    id: `field-${field.slug}`,\n    defaultValue: field.value,\n  };\n\n  if (\"max_length\" in field) {\n    inputProps.maxLength = field.max_length;\n  }\n\n  if (\"choices\" in field) {\n    inputProps.choices = field.choices;\n  }\n\n  if (\"single_answer\" in field) {\n    inputProps.multiple = !field.single_answer;\n  }\n\n  let Component;\n\n  switch (field.type) {\n    case \"free_text\":\n      Component = () => <TextAreaField {...inputProps} />;\n      break;\n\n    case \"file\":\n      Component = () => (\n        <UploadField name={field.slug} field={field as WorkableFormField} />\n      );\n      break;\n\n    case \"boolean\":\n      Component = () => (\n        <Toggle {...inputProps} label={field.label} slug={field.slug} />\n      );\n      break;\n\n    case \"date\":\n      Component = () => <DateField {...inputProps} />;\n      break;\n\n    case \"multiple_choice\":\n      Component = () => <ChoiceField {...inputProps} />;\n      break;\n\n    case \"dropdown\":\n      Component = () => <SelectField {...inputProps} />;\n      break;\n\n    case \"numeric\":\n      Component = () => <NumberField {...inputProps} />;\n      break;\n\n    case \"complex\":\n      if (field.multiple) {\n        Component = () => <ComplexMultiple name={name} field={field} />;\n      } else {\n        Component = () => <div>complex simple (not implemented)</div>;\n      }\n      break;\n\n    default:\n      Component = () => <TextField {...inputProps} />;\n  }\n\n  if (field.name === \"phone\") {\n    Component = () => <TelephoneField {...inputProps} />;\n  }\n\n  if (field.type === \"boolean\") {\n    return <FormItem>{Component && <Component />}</FormItem>;\n  }\n\n  return (\n    <FormItem>\n      <Label label={field.label} slug={field.slug} required={field.required} />\n      {Component && <Component />}\n    </FormItem>\n  );\n};\n","type ButtonRowProps = {\n  children?: React.ReactNode;\n};\n\nexport const ButtonRow: React.ComponentType<ButtonRowProps> = ({\n  children,\n}) => {\n  return <div className=\"button-row\">{children}</div>;\n};\n","type HeadingProps = {\n  children?: React.ReactNode;\n  as?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n};\n\nexport const Heading: React.ComponentType<HeadingProps> = ({\n  children,\n  as = \"h2\",\n}) => {\n  const Element = as;\n  return <Element className={`heading heading--${as}`}>{children}</Element>;\n};\n","import React = require(\"react\");\n\nimport { ConfigContext } from \"./ConfigContext\";\nimport { Heading } from \"./Heading\";\n\ntype FormProps = {\n  children: React.ReactNode;\n  onSubmit(\n    event: React.FormEvent<HTMLFormElement>,\n    cb: (error: string | null) => void,\n  ): void;\n};\n\nexport const Form: React.ComponentType<FormProps> = ({\n  children,\n  onSubmit,\n}) => {\n  const [state, setState] = React.useState<\n    \"initial\" | \"saving\" | \"error\" | \"complete\"\n  >(\"initial\");\n\n  const [error, setError] = React.useState<string | null>(null);\n  const config = React.useContext(ConfigContext);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    setState(\"saving\");\n    setError(null);\n    onSubmit(event, (error: string | null) => {\n      if (error) {\n        setError(error);\n        setState(\"error\");\n      } else {\n        setState(\"complete\");\n      }\n    });\n  };\n\n  return (\n    <form\n      className={`form--${state}`}\n      onSubmit={handleSubmit}\n      encType=\"multipart/form-data\"\n    >\n      {config.labelForm && <Heading as=\"h1\">{config.labelForm}</Heading>}\n      {children}\n      <p\n        className={`form__error ${error ? \"enabled\" : \"disabled\"}`}\n        onClick={() => setError(null)}\n      >\n        {error}\n      </p>\n    </form>\n  );\n};\n","/**\n * Clean form data\n * - checkboxes are stored as \"on\" or \"off\"\n * - complex fields are stored as json\n */\n\nexport const cleanFormData = (data: any) => {\n  const cleanedData: any = {};\n  Object.keys(data).forEach((key) => {\n    let value = data[key];\n\n    // parse complex fields that are already stored as json\n    try {\n      value = JSON.parse(value);\n    } catch (e) {}\n\n    // arrays\n    if (Array.isArray(value)) {\n      cleanedData[key] = value.map((item) => {\n        if (typeof item === \"object\" && item !== null) {\n          if (\"value\" in value) {\n            return cleanValue(value.value);\n          }\n\n          if (\"data\" in item) {\n            const cleanedData: any = {};\n            Object.keys(item.data).forEach((key) => {\n              cleanedData[key] = cleanValue(item.data[key].value);\n            });\n            return cleanedData;\n          }\n\n          return cleanFormData(item);\n        }\n        return cleanValue(item);\n      });\n      return;\n    }\n\n    cleanedData[key] = cleanValue(value);\n  });\n\n  return cleanedData;\n};\n\n/**\n * Clean value\n * - empty values are removed\n * - checkboxes are stored as boolean\n */\n\nexport const cleanValue = (value: any) => {\n  // empty values\n  if (typeof value === \"string\" && value.trim().length === 0) {\n    return;\n  }\n\n  // checkboxes\n  if (value === \"on\" || value === \"off\") {\n    return value === \"on\" ? true : false;\n  }\n\n  return value;\n};\n\n/**\n * Create workable candidate from form data\n * based on field types in formFields and questions\n */\n\nexport const createWorkableCandidate = (\n  data: any,\n  formFields: WorkableFormField[],\n  questions: WorkableQuestion[],\n) => {\n  const candidate: WorkableCandidate = {\n    name: data.name,\n    firstname: data.firstname,\n    lastname: data.lastname,\n    email: data.email,\n    headline: data.headline,\n    summary: data.summary,\n    address: data.address,\n    avatar: data.avatar,\n    phone: data.phone ? `+${data.phone_dialcode}${data.phone}` : undefined,\n    cover_letter: data.cover_letter,\n    education_entries: data.education,\n    experience_entries: data.experience,\n    answers: [],\n    skills: data.skills,\n    tags: data.tags,\n    disqualified: data.disqualified,\n    disqualification_reason: data.disqualification_reason,\n    disqualified_at: data.disqualified_at,\n    social_profiles: data.social_profiles,\n    domain: data.domain,\n    recruiter_key: data.recruiter_key,\n  };\n\n  // find form fields that are not yet in the object\n  const missingFields = formFields.filter(\n    (field) => !Object.keys(candidate).includes(field.key),\n  );\n\n  // add answers\n  missingFields.forEach((question) => {\n    const value = data[question.key];\n\n    if (value) {\n      // \"string\" | \"free_text\" | \"file\" | \"boolean\" | \"date\" | \"complex\"\n      switch (question.type) {\n        case \"string\":\n          const stringAnswer: WorkableAnswerFreeText = {\n            question_key: question.key,\n            body: value,\n          };\n          candidate.answers.push(stringAnswer);\n          break;\n\n        case \"free_text\":\n          const freetextAnswer: WorkableAnswerFreeText = {\n            question_key: question.key,\n            body: value,\n          };\n          candidate.answers.push(freetextAnswer);\n          break;\n\n        case \"boolean\":\n          const booleanAnswer: WorkableAnswerBoolean = {\n            question_key: question.key,\n            checked: value,\n          };\n          candidate.answers.push(booleanAnswer);\n          break;\n\n        case \"date\":\n          const dateAnswer: WorkableAnswerDate = {\n            question_key: question.key,\n            date: value,\n          };\n          candidate.answers.push(dateAnswer);\n          break;\n\n        case \"file\":\n          const fileAnswer: WorkableAnswerFileData = {\n            question_key: question.key,\n            name: question.key,\n            file_url: \"https://faces-img.xcdn.link/image-lorem-face-4053.jpg\",\n            // file: {\n            //   name: question.key,\n            //   data: value,\n            // },\n          };\n          candidate.answers.push(fileAnswer);\n          break;\n\n        // not covering the complex case here, as experience and education are handled separately\n      }\n    }\n  });\n\n  // find questions that are not yet in the object\n  const missingQuestions = questions.filter(\n    (question) => !Object.keys(candidate).includes(question.id),\n  );\n\n  // add answers;\n  missingQuestions.forEach((question) => {\n    const value = data[question.id];\n\n    if (value) {\n      // \"short_text\" | \"free_text\" | \"multiple_choice\" | \"boolean\" | \"dropdown\" | \"numeric\" | \"date\" | \"file\";\n      switch (question.type) {\n        case \"short_text\":\n          const shortTextAnswer: WorkableAnswerShortText = {\n            question_key: question.id,\n            body: value,\n          };\n          candidate.answers.push(shortTextAnswer);\n          break;\n        case \"free_text\":\n          const freetextAnswer: WorkableAnswerFreeText = {\n            question_key: question.id,\n            body: value,\n          };\n          candidate.answers.push(freetextAnswer);\n          break;\n\n        case \"multiple_choice\":\n          const multipleChoiceAnswer: WorkableAnswerMultipleChoice = {\n            question_key: question.id,\n            choices: value,\n          };\n          candidate.answers.push(multipleChoiceAnswer);\n          break;\n\n        case \"boolean\":\n          const booleanAnswer: WorkableAnswerBoolean = {\n            question_key: question.id,\n            checked: value,\n          };\n          candidate.answers.push(booleanAnswer);\n          break;\n\n        case \"dropdown\":\n          const dropdownAnswer: WorkableAnswerDropdown = {\n            question_key: question.id,\n            choices: value,\n          };\n          candidate.answers.push(dropdownAnswer);\n          break;\n\n        case \"date\":\n          const dateAnswer: WorkableAnswerDate = {\n            question_key: question.id,\n            date: value,\n          };\n          candidate.answers.push(dateAnswer);\n          break;\n\n        case \"numeric\":\n          const numericAnswer: WorkableAnswerNumeric = {\n            question_key: question.id,\n            value: +value,\n          };\n          candidate.answers.push(numericAnswer);\n          break;\n\n        case \"file\":\n          const fileAnswer: WorkableAnswerFileData = {\n            question_key: question.id,\n            file_url: \"https://faces-img.xcdn.link/image-lorem-face-4053.jpg\",\n            // file: {\n            //   name: question.id,\n            //   data: value,\n            // },\n          };\n          candidate.answers.push(fileAnswer);\n          break;\n      }\n    }\n  });\n\n  // remove undefined values\n  Object.keys(candidate).forEach((key) =>\n    candidate[key] === undefined ? delete candidate[key] : {},\n  );\n\n  return candidate;\n};\n","import React = require(\"react\");\nimport { ConfigContext, DEFAULT_FORM_CONFIG } from \"./ConfigContext\";\nimport { Field, FieldProps } from \"./Field\";\nimport { Fieldset } from \"./Fieldset\";\nimport { Button } from \"./Button\";\nimport { ButtonRow } from \"./ButtonRow\";\nimport { Form } from \"./Form\";\nimport { cleanFormData, createWorkableCandidate } from \"./utils\";\n\ntype ApplicationFormProps = {\n  formFields: WorkableFormField[];\n  questions: WorkableQuestion[];\n  action?: string;\n  config?: FormConfigType;\n  fieldsets?: FormFieldsetsType;\n  onSave?: (\n    data: WorkableCandidate,\n    cb: (error?: string | null) => void,\n  ) => void;\n};\n\nexport const REST_OF_FIELDS_FLAG = \"...\";\n\nexport const ApplicationForm: React.ComponentType<ApplicationFormProps> = ({\n  formFields = [],\n  questions = [],\n  config = {},\n  fieldsets = [],\n  onSave = () => {},\n}) => {\n  // get all fields from the form\n  const allFields = (formFields || []).map((field) => ({\n    ...field,\n    name: field.key,\n    label: field.label,\n    slug: field.key,\n  }));\n\n  const allQuestions = (questions || []).map((field) => ({\n    ...field,\n    name: field.id,\n    label: field.body,\n    slug: field.id,\n  }));\n\n  const allFormFields = [...allFields, ...allQuestions];\n\n  const handleSubmit = (\n    event: React.FormEvent<HTMLFormElement>,\n    cb: (error?: string | null) => void,\n  ) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    const entries: any = Object.fromEntries(formData.entries());\n    const allValues: any = {};\n    Object.keys(entries).forEach((key) => {\n      const question = questions.find((q) => q.id === key);\n      if (\n        question?.type === \"multiple_choice\" ||\n        question?.type === \"dropdown\"\n      ) {\n        allValues[key] = formData.getAll(key);\n      } else {\n        allValues[key] = formData.get(key);\n      }\n    });\n\n    const cleanData: any = cleanFormData(allValues);\n    const workableCandidate: WorkableCandidate = createWorkableCandidate(\n      cleanData,\n      formFields,\n      questions,\n    );\n\n    onSave(workableCandidate, (error) => {\n      if (error) {\n        cb(error);\n      } else {\n        cb();\n      }\n    });\n\n    return false;\n  };\n\n  // if no fieldsets are defined, add all fields to a single fieldset\n  if (!fieldsets.length) {\n    fieldsets.push({\n      name: \"\",\n      fields: allFormFields.map((field) => field.name),\n    });\n  }\n\n  // if ... is not present in fieldsets add it to the end\n  if (\n    !fieldsets.some((fieldset) =>\n      fieldset.fields.some((field) => field === REST_OF_FIELDS_FLAG),\n    )\n  ) {\n    fieldsets[fieldsets.length - 1].fields.push(REST_OF_FIELDS_FLAG);\n  }\n\n  const definedFieldsets = fieldsets.map((fieldset) => {\n    return {\n      name: fieldset.name,\n      fields: fieldset.fields\n        .map((field) => {\n          if (field === REST_OF_FIELDS_FLAG) {\n            return REST_OF_FIELDS_FLAG;\n          }\n          const fieldsetField = allFormFields.find(\n            ({ name }) => name === field,\n          );\n          if (fieldsetField) {\n            allFormFields.splice(allFormFields.indexOf(fieldsetField), 1);\n            return fieldsetField;\n          }\n          return null;\n        })\n        .flat()\n        .filter(Boolean),\n    };\n  });\n\n  // replace fieldset field named \"...\" with the remaining fields\n  const allFieldsets = definedFieldsets.map((fieldset) => {\n    const restOfFieldsField = fieldset.fields.find(\n      (field) => field === REST_OF_FIELDS_FLAG,\n    );\n\n    if (restOfFieldsField) {\n      fieldset.fields.splice(\n        fieldset.fields.indexOf(restOfFieldsField),\n        1,\n        ...allFormFields,\n      );\n    }\n\n    return fieldset;\n  }) as unknown as {\n    name?: string;\n    fields: FieldProps[];\n  }[];\n\n  return (\n    <div className=\"application-form\">\n      <ConfigContext.Provider value={{ ...DEFAULT_FORM_CONFIG, ...config }}>\n        <Form onSubmit={handleSubmit}>\n          {allFieldsets.map((fieldset, index) => (\n            <Fieldset\n              name={fieldset.name}\n              key={fieldset.name || fieldset.fields[0]?.name || index}\n            >\n              {fieldset.fields\n                .filter(({ name }) => Boolean(name))\n                .map((field) => (\n                  <Field\n                    key={field.name}\n                    name={field.name}\n                    field={field as unknown as FieldProps[\"field\"]}\n                  />\n                ))}\n            </Fieldset>\n          ))}\n\n          <Fieldset>\n            <ButtonRow>\n              <Button type=\"submit\" size=\"lg\" style={{ width: \"100%\" }}>\n                {config.labelSubmit || DEFAULT_FORM_CONFIG.labelSubmit}\n              </Button>\n            </ButtonRow>\n          </Fieldset>\n        </Form>\n      </ConfigContext.Provider>\n    </div>\n  );\n};\n"],"names":["$46371591ef975b7f$export$3f655c770124f5e3","telephoneInitialCountry","telephonePreferredCountries","telephoneAllowDropdown","telephoneAutoHideDialCode","telephoneAutoPlaceholder","telephoneCustomContainer","telephoneCustomPlaceholder","telephoneDropdownContainer","telephoneExcludeCountries","telephoneFormatOnDisplay","telephoneGeoIpLookup","telephoneHiddenInput","telephoneLocalizedCountries","telephoneNationalMode","telephoneOnlyCountries","telephonePlaceholderNumberType","telephoneSeparateDialCode","labelForm","labelSubmit","labelAdd","labelSave","labelCancel","labelEdit","labelDelete","labelClose","labelOptional","labelClear","labelDropzoneUpload","labelDropzoneDragDrop","labelDropzoneMaxSize","labelDropzoneAcceptableFileTypes","labelDropzoneReplaceFile","labelDropzoneNoFilesAccepted","labelDropzoneAborted","labelDropzoneError","iconCancel","$4FLPu$reactjsxruntime","jsx","viewBox","fill","xmlns","width","height","d","stroke","strokeWidth","iconCheck","iconEdit","jsxs","iconDelete","iconClear","$46371591ef975b7f$export$a92f85ab3e9ad68b","$4FLPu$react","createContext","$0b181d47ed69cae8$export$b04be29aa201d4f5","label","required","slug","config","useContext","className","htmlFor","$2aa09ed41b960c53$export$bea8ebba691c5813","name","id","defaultValue","type","defaultChecked","Boolean","$c4f26462bdfd8192$export$56e87bf42978147a","children","$8f728dfe91be7728$export$d1f826a06de665f2","count","maxLength","$2ec2b2615757c602$export$2c73285ae9390cec","value","setValue","useState","onChange","e","target","length","$5530faebb81017b1$export$301bf6213f61d17f","rows","$fed4c326da8dd110$export$6713ee24224a3285","$f0b54e4fac0798ec$export$d9781c7894a82487","$1207f4e6d4f3dfe5$export$63c5fa0b2fdccd2e","$6a387c6d0a95ddc1$export$bbb9a9f0dc629995","inputRef","useRef","dialCode","setDialCode","useEffect","current","iti","$4FLPu$intltelinput","initialCountry","allowDropdown","autoHideDialCode","autoPlaceholder","customContainer","customPlaceholder","dropdownContainer","excludeCountries","formatOnDisplay","geoIpLookup","hiddenInput","localizedCountries","nationalMode","onlyCountries","placeholderNumberType","preferredCountries","separateDialCode","utilsScript","onCountryChange","countryData","getSelectedCountryData","addEventListener","ref","readOnly","$92cb36c8aa41f29f$export$d61c19f03375c53e","field","IS_IMAGE","supported_file_types","filter","x","includes","state","setState","image","setImage","message","setMessage","fileBase64","setFileBase64","acceptedFiles","getRootProps","getInputProps","$4FLPu$reactdropzone","useDropzone","maxFiles","multiple","maxSize","max_file_size","accept","map","ext","onDrop","forEach","file","reader","FileReader","onabort","reset","onerror","onload","result","toString","split","readAsDataURL","Object","assign","preview","URL","createObjectURL","revokeObjectURL","Fragment","onClick","preventDefault","splice","style","display","maxWidth","src","onLoad","Math","floor","join","dangerouslySetInnerHTML","__html","cx","cy","r","$91b9aad5a64c1a48$export$353f5b6fc5456de1","theme","size","disabled","props","$51b1b21d0f089fd2$export$e154be390aa0e14","displayClearButton","fieldsetRef","querySelectorAll","input","checked","dispatchEvent","Event","button","click","$aabbac4c6e41489a$export$e8c699c108165025","formRef","hiddenValueFieldRef","editingEntryId","setEditingEntryId","entryId","entries","updateEntries","useReducer","data","action","index","findIndex","newData","JSON","stringify","parse","entry","key","$4FLPu$radixuireactvisuallyhidden","Root","$4FLPu$radixuireactdialog","open","Portal","Overlay","Content","onEscapeKeyDown","onPointerDownOutside","onInteractOutside","asChild","Title","fields","subfield","editingEntry","find","$83cda72e4a349305$export$a455218a85c89869","formData","FormData","fromEntries","matchingField","f","trim","onSave","$e92f6eb09d0fcfe6$export$d55b50a564d0b931","choices","choice","body","$797e730d1d4d77a6$export$fc4f3719f31d1e79","console","log","inputProps","Component","max_length","single_answer","$5263deb48f373351$export$564cbe3426fc093a","$5982914be01221fb$export$a8a3e93435678ff9","as","Element","$6952fa8d42b24858$export$a7fed597f4b8afd8","onSubmit","error","setError","event","encType","$533342404bccfdc5$export$9ede6ba874448640","cleanedData","keys","Array","isArray","item","$533342404bccfdc5$export$33f062f47f21a01","$533342404bccfdc5$export$7a4712243be385f2","formFields","questions","candidate","firstname","lastname","email","headline","summary","address","avatar","phone","phone_dialcode","undefined","cover_letter","education_entries","education","experience_entries","experience","answers","skills","tags","disqualified","disqualification_reason","disqualified_at","social_profiles","domain","recruiter_key","question","stringAnswer","question_key","push","freetextAnswer","booleanAnswer","dateAnswer","date","fileAnswer","file_url","shortTextAnswer","multipleChoiceAnswer","dropdownAnswer","numericAnswer","$196f026530850a63$export$885291568461564a","$196f026530850a63$export$60413e28724d3abd","fieldsets","allFormFields","some","fieldset","allFieldsets","fieldsetField","indexOf","flat","restOfFieldsField","Provider","cb","currentTarget","allValues","q","getAll","get","cleanData","workableCandidate"],"version":3,"file":"main.js.map"}