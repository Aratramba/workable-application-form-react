{"mappings":"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","sources":["src/index.ts","src/ApplicationForm.tsx","src/ConfigContext.tsx","src/Field.tsx","src/Label.tsx","src/Toggle.tsx","src/TextField.tsx","src/FormField.tsx","src/MaxLength.tsx","src/TextAreaField.tsx","src/FormItem.tsx","src/DateField.tsx","src/NumberField.tsx","src/TelephoneField.tsx","src/UploadField.tsx","src/ComplexMultipleField.tsx","src/Fieldset.tsx","src/Button.tsx","src/SelectField.tsx","src/ChoiceField.tsx","src/ButtonRow.tsx","src/Form.tsx","src/Heading.tsx","src/utils.ts"],"sourcesContent":["import { ApplicationForm } from \"./ApplicationForm\";\n\nexport { ApplicationForm };\n","import React = require(\"react\");\nimport { ConfigContext, DEFAULT_FORM_CONFIG } from \"./ConfigContext\";\nimport { Field, FieldProps } from \"./Field\";\nimport { Fieldset } from \"./Fieldset\";\nimport { Button } from \"./Button\";\nimport { ButtonRow } from \"./ButtonRow\";\nimport { Form } from \"./Form\";\nimport { cleanFormData, createWorkableCandidate } from \"./utils\";\n\ntype ApplicationFormProps = {\n  formFields: WorkableFormField[];\n  questions: WorkableQuestion[];\n  action?: string;\n  config?: FormConfigType;\n  fieldsets?: FormFieldsetsType;\n  onSave?: (\n    data: WorkableCandidate,\n    cb: (error?: string | null) => void,\n  ) => void;\n};\n\nexport const REST_OF_FIELDS_FLAG = \"...\";\n\nexport const ApplicationForm: React.ComponentType<ApplicationFormProps> = ({\n  formFields = [],\n  questions = [],\n  config = {},\n  fieldsets = [],\n  onSave = () => {},\n}) => {\n  // get all fields from the form\n  const allFields = (formFields || []).map((field) => ({\n    ...field,\n    name: field.key,\n    label: field.label,\n    slug: field.key,\n  }));\n\n  const allQuestions = (questions || []).map((field) => ({\n    ...field,\n    name: field.id,\n    label: field.body,\n    slug: field.id,\n  }));\n\n  const allFormFields = [...allFields, ...allQuestions];\n\n  const handleSubmit = (\n    event: React.FormEvent<HTMLFormElement>,\n    cb: (error?: string | null) => void,\n  ) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    const entries: any = Object.fromEntries(formData.entries());\n    const allValues: any = {};\n    Object.keys(entries).forEach((key) => {\n      const question = questions.find((q) => q.id === key);\n      if (\n        question?.type === \"multiple_choice\" ||\n        question?.type === \"dropdown\"\n      ) {\n        allValues[key] = formData.getAll(key);\n      } else {\n        allValues[key] = formData.get(key);\n      }\n    });\n\n    const cleanData: any = cleanFormData(allValues);\n    const workableCandidate: WorkableCandidate = createWorkableCandidate(\n      cleanData,\n      formFields,\n      questions,\n    );\n\n    onSave(workableCandidate, (error) => {\n      if (error) {\n        cb(error);\n      } else {\n        cb();\n      }\n    });\n\n    return false;\n  };\n\n  // if no fieldsets are defined, add all fields to a single fieldset\n  if (!fieldsets.length) {\n    fieldsets.push({\n      name: \"\",\n      fields: allFormFields.map((field) => field.name),\n    });\n  }\n\n  // if ... is not present in fieldsets add it to the end\n  if (\n    !fieldsets.some((fieldset) =>\n      fieldset.fields.some((field) => field === REST_OF_FIELDS_FLAG),\n    )\n  ) {\n    fieldsets[fieldsets.length - 1].fields.push(REST_OF_FIELDS_FLAG);\n  }\n\n  const definedFieldsets = fieldsets.map((fieldset) => {\n    return {\n      name: fieldset.name,\n      fields: fieldset.fields\n        .map((field) => {\n          if (field === REST_OF_FIELDS_FLAG) {\n            return REST_OF_FIELDS_FLAG;\n          }\n          const fieldsetField = allFormFields.find(\n            ({ name }) => name === field,\n          );\n          if (fieldsetField) {\n            allFormFields.splice(allFormFields.indexOf(fieldsetField), 1);\n            return fieldsetField;\n          }\n          return null;\n        })\n        .flat()\n        .filter(Boolean),\n    };\n  });\n\n  // replace fieldset field named \"...\" with the remaining fields\n  const allFieldsets = definedFieldsets.map((fieldset) => {\n    const restOfFieldsField = fieldset.fields.find(\n      (field) => field === REST_OF_FIELDS_FLAG,\n    );\n\n    if (restOfFieldsField) {\n      fieldset.fields.splice(\n        fieldset.fields.indexOf(restOfFieldsField),\n        1,\n        ...allFormFields,\n      );\n    }\n\n    return fieldset;\n  }) as unknown as {\n    name?: string;\n    fields: FieldProps[];\n  }[];\n\n  return (\n    <div className=\"application-form\">\n      <ConfigContext.Provider value={{ ...DEFAULT_FORM_CONFIG, ...config }}>\n        <Form onSubmit={handleSubmit}>\n          {allFieldsets.map((fieldset, index) => (\n            <Fieldset\n              name={fieldset.name}\n              key={fieldset.name || fieldset.fields[0]?.name || index}\n            >\n              {fieldset.fields\n                .filter(({ name }) => Boolean(name))\n                .map((field) => (\n                  <Field\n                    key={field.name}\n                    name={field.name}\n                    field={field as unknown as FieldProps[\"field\"]}\n                  />\n                ))}\n            </Fieldset>\n          ))}\n\n          <Fieldset>\n            <ButtonRow>\n              <Button type=\"submit\" size=\"lg\" style={{ width: \"100%\" }}>\n                {config.labelSubmit || DEFAULT_FORM_CONFIG.labelSubmit}\n              </Button>\n            </ButtonRow>\n          </Fieldset>\n        </Form>\n      </ConfigContext.Provider>\n    </div>\n  );\n};\n","import React = require(\"react\");\n\nexport const DEFAULT_FORM_CONFIG: FormConfigType = {\n  telephoneInitialCountry: \"US\",\n  telephonePreferredCountries: [\"us\", \"gb\", \"ca\", \"de\", \"au\"],\n  telephoneAllowDropdown: true,\n  telephoneAutoHideDialCode: false,\n  telephoneAutoPlaceholder: \"polite\",\n  telephoneCustomContainer: \"\",\n  telephoneCustomPlaceholder: null,\n  telephoneDropdownContainer: null,\n  telephoneExcludeCountries: [],\n  telephoneFormatOnDisplay: true,\n  telephoneGeoIpLookup: null,\n  telephoneHiddenInput: \"\",\n  telephoneLocalizedCountries: null,\n  telephoneNationalMode: false,\n  telephoneOnlyCountries: [],\n  telephonePlaceholderNumberType: \"MOBILE\",\n  telephoneSeparateDialCode: true,\n\n  // labels\n  labelForm: \"Application\",\n  labelSubmit: \"Submit application\",\n  labelAdd: \"Add\",\n  labelSave: \"Save\",\n  labelCancel: \"Cancel\",\n  labelEdit: \"Edit\",\n  labelDelete: \"Delete\",\n  labelClose: \"Close\",\n  labelOptional: \"(optional)\",\n  labelClear: \"Clear\",\n\n  // dropzone\n  labelDropzoneUpload: \"Upload a file\",\n  labelDropzoneDragDrop: \"or drag and drop here\",\n  labelDropzoneMaxSize: \"Max file size is \",\n  labelDropzoneAcceptableFileTypes: \"Acceptable file types: \",\n  labelDropzoneReplaceFile: \"Replace file\",\n  labelDropzoneNoFilesAccepted: \"No files accepted\",\n  labelDropzoneAborted: \"File reading was aborted\",\n  labelDropzoneError: \"File reading has failed\",\n\n  // icons\n  iconCancel: () => (\n    <svg\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={24}\n      height={24}\n    >\n      <path\n        d=\"M7.7574 7.7574 12 12.0001m0 0 4.2426 4.2426M12 12.0001l4.2426-4.2427M12 12.0001l-4.2426 4.2426\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n    </svg>\n  ),\n  iconCheck: () => (\n    <svg\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={24}\n      height={24}\n    >\n      <path\n        d=\"M6.5 12.5 10 16l7.5-7.5\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n      />\n    </svg>\n  ),\n  iconEdit: () => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n    >\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        d=\"M9 6.75H4.75v12.5h12.5V15\"\n      ></path>\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        d=\"M17.5 4.25l-7.25 7.25v2.75H13l7.24-7.26 -2.75-2.75Z\"\n      ></path>\n    </svg>\n  ),\n  iconDelete: () => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n    >\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        d=\"M7.25 7.75h9.5m-9.5 0v10.5h9.5V7.75m-9.5 0H5m11.75 0H19m-4.75 0v-3h-4.5v3\"\n      ></path>\n    </svg>\n  ),\n  iconClear: () => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={24}\n      height={24}\n    >\n      <path\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        d=\"M7.25 7.75h9.5m-9.5 0v10.5h9.5V7.75m-9.5 0H5m11.75 0H19m-4.75 0v-3h-4.5v3\"\n      ></path>\n    </svg>\n  ),\n};\n\nexport const ConfigContext = React.createContext(DEFAULT_FORM_CONFIG);\n","import React = require(\"react\");\nimport { Label } from \"./Label\";\nimport { Toggle } from \"./Toggle\";\nimport { TextField } from \"./TextField\";\nimport { TextAreaField } from \"./TextAreaField\";\nimport { FormItem } from \"./FormItem\";\nimport { DateField } from \"./DateField\";\nimport { NumberField } from \"./NumberField\";\n\nimport { TelephoneField } from \"./TelephoneField\";\nimport { UploadField } from \"./UploadField\";\nimport { ComplexMultiple } from \"./ComplexMultipleField\";\nimport { SelectField } from \"./SelectField\";\nimport { ChoiceField } from \"./ChoiceField\";\n\nexport type FieldProps = {\n  name: string;\n  field: (WorkableFormField | WorkableQuestion) & {\n    name: string;\n    slug: string;\n    label: React.ReactElement | React.ReactNode;\n    value?: string;\n  };\n};\n\nexport const Field: React.ComponentType<FieldProps> = ({ name, field }) => {\n  if (!field) {\n    console.log(`Missing field: ${name}`);\n    return null;\n  }\n\n  const inputProps: {\n    name: string;\n    required: boolean;\n    id: string;\n    defaultValue?: string;\n    maxLength?: number;\n    choices?: { body?: string; id?: string }[];\n    multiple?: boolean;\n  } = {\n    name: field.name,\n    required: field.required,\n    id: `field-${field.slug}`,\n    defaultValue: field.value,\n  };\n\n  if (\"max_length\" in field) {\n    inputProps.maxLength = field.max_length;\n  }\n\n  if (\"choices\" in field) {\n    inputProps.choices = field.choices;\n  }\n\n  if (\"single_answer\" in field) {\n    inputProps.multiple = !field.single_answer;\n  }\n\n  let Component;\n\n  switch (field.type) {\n    case \"free_text\":\n      Component = () => <TextAreaField {...inputProps} />;\n      break;\n\n    case \"file\":\n      Component = () => (\n        <UploadField name={field.slug} field={field as WorkableFormField} />\n      );\n      break;\n\n    case \"boolean\":\n      Component = () => (\n        <Toggle {...inputProps} label={field.label} slug={field.slug} />\n      );\n      break;\n\n    case \"date\":\n      Component = () => <DateField {...inputProps} />;\n      break;\n\n    case \"multiple_choice\":\n      Component = () => <ChoiceField {...inputProps} />;\n      break;\n\n    case \"dropdown\":\n      Component = () => <SelectField {...inputProps} />;\n      break;\n\n    case \"numeric\":\n      Component = () => <NumberField {...inputProps} />;\n      break;\n\n    case \"complex\":\n      if (field.multiple) {\n        Component = () => <ComplexMultiple name={name} field={field} />;\n      } else {\n        Component = () => <div>complex simple (not implemented)</div>;\n      }\n      break;\n\n    default:\n      Component = () => <TextField {...inputProps} />;\n  }\n\n  if (field.name === \"phone\") {\n    Component = () => <TelephoneField {...inputProps} />;\n  }\n\n  if (field.type === \"boolean\") {\n    return <FormItem>{Component && <Component />}</FormItem>;\n  }\n\n  return (\n    <FormItem>\n      <Label label={field.label} slug={field.slug} required={field.required} />\n      {Component && <Component />}\n    </FormItem>\n  );\n};\n","import React = require(\"react\");\nimport { ConfigContext } from \"./ConfigContext\";\n\ntype LabelProps = {\n  label: React.ReactElement | React.ReactNode;\n  slug: string;\n  required: boolean;\n};\n\nexport const Label: React.ComponentType<LabelProps> = ({\n  label,\n  required,\n  slug,\n}) => {\n  const config = React.useContext(ConfigContext);\n\n  return (\n    <div className=\"form-label-wrapper\">\n      <label className=\"form-label\" htmlFor={`field-${slug}`}>\n        {label}\n        {required ? (\n          <span className=\"form-label__required\">*</span>\n        ) : (\n          <span className=\"form-label__optional\">{config.labelOptional}</span>\n        )}\n      </label>\n    </div>\n  );\n};\n","import { useContext } from \"react\";\nimport { Label } from \"./Label\";\nimport { ConfigContext } from \"./ConfigContext\";\n\ntype ToggleProps = {\n  label: React.ReactNode;\n  slug: string;\n} & FormFieldType;\n\nexport const Toggle: React.ComponentType<ToggleProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  label,\n  slug,\n}) => {\n  const config = useContext(ConfigContext);\n  return (\n    <div className=\"toggle-wrapper\">\n      <div className=\"toggle\">\n        <input\n          type=\"checkbox\"\n          name={name}\n          required={required}\n          id={id}\n          defaultChecked={Boolean(defaultValue)}\n          className=\"toggle__input\"\n        />\n        <span className=\"toggle__check\">{config.iconCheck()}</span>\n      </div>\n\n      <Label label={label} slug={slug} required={required} />\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport { FormField } from \"./FormField\";\nimport { MaxLength } from \"./MaxLength\";\n\ntype TextFieldProps = FormFieldType;\n\nexport const TextField: React.ComponentType<TextFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  maxLength,\n}) => {\n  const [value, setValue] = useState<string>(null);\n\n  return (\n    <FormField>\n      <input\n        type=\"text\"\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n        className=\"form-field__text\"\n        maxLength={maxLength}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setValue(e.target.value)\n        }\n      />\n      <MaxLength count={value?.length} maxLength={maxLength} />\n    </FormField>\n  );\n};\n","type FormFieldProps = {\n  children: React.ReactNode;\n};\n\nexport const FormField: React.ComponentType<FormFieldProps> = ({\n  children,\n}) => {\n  return (\n    <div className=\"form-field\">\n      <div className=\"form-field__wrapper\">{children}</div>\n    </div>\n  );\n};\n","type MaxLengthProps = {\n  count?: number;\n  maxLength?: number;\n};\n\nexport const MaxLength = ({ count = 0, maxLength }) => {\n  if (!maxLength) return null;\n\n  return (\n    <span className=\"form-field__maxlength\">\n      {count} / {maxLength}\n    </span>\n  );\n};\n","import { useState } from \"react\";\nimport { FormField } from \"./FormField\";\n\nimport { MaxLength } from \"./MaxLength\";\n\ntype TextAreaFieldProps = {} & FormFieldType;\n\nexport const TextAreaField: React.ComponentType<TextAreaFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  maxLength,\n}) => {\n  const [value, setValue] = useState<string>(null);\n  return (\n    <FormField>\n      <textarea\n        name={name}\n        required={required}\n        defaultValue={defaultValue}\n        id={id}\n        rows={5}\n        className=\"form-field__textarea\"\n        maxLength={maxLength}\n        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n          setValue(e.target.value)\n        }\n      />\n      <MaxLength count={value?.length} maxLength={maxLength} />\n    </FormField>\n  );\n};\n","type FormItemProps = {\n  children: React.ReactNode;\n};\n\nexport const FormItem: React.ComponentType<FormItemProps> = ({ children }) => {\n  return <div className=\"form-item\">{children}</div>;\n};\n","import { FormField } from \"./FormField\";\n\ntype DateFieldProps = FormFieldType;\n\nexport const DateField: React.ComponentType<DateFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n}) => {\n  return (\n    <FormField>\n      <input\n        type=\"date\"\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n        className=\"form-field__text form-field__date\"\n      />\n    </FormField>\n  );\n};\n","import { FormField } from \"./FormField\";\n\ntype NumberFieldProps = FormFieldType;\n\nexport const NumberField: React.ComponentType<NumberFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  maxLength,\n}) => {\n  return (\n    <FormField>\n      <input\n        type=\"number\"\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n        className=\"form-field__text form-field__number\"\n        maxLength={maxLength}\n      />\n    </FormField>\n  );\n};\n","type TelephoneFieldProps = {} & FormFieldType;\n\nimport intlTelInput from \"intl-tel-input\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { ConfigContext } from \"./ConfigContext\";\nimport { FormField } from \"./FormField\";\n\nexport const TelephoneField: React.ComponentType<TelephoneFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  maxLength,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const config = useContext(ConfigContext);\n  const [dialCode, setDialCode] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!inputRef.current) return;\n\n    const iti = intlTelInput(inputRef.current, {\n      initialCountry: config.telephoneInitialCountry,\n      allowDropdown: config.telephoneAllowDropdown,\n      autoHideDialCode: config.telephoneAutoHideDialCode,\n      autoPlaceholder: config.telephoneAutoPlaceholder,\n      customContainer: config.telephoneCustomContainer,\n      customPlaceholder: config.telephoneCustomPlaceholder,\n      dropdownContainer: config.telephoneDropdownContainer,\n      excludeCountries: config.telephoneExcludeCountries,\n      formatOnDisplay: config.telephoneFormatOnDisplay,\n      geoIpLookup: config.telephoneGeoIpLookup,\n      hiddenInput: config.telephoneHiddenInput,\n      localizedCountries: config.telephoneLocalizedCountries,\n      nationalMode: config.telephoneNationalMode,\n      onlyCountries: config.telephoneOnlyCountries,\n      placeholderNumberType: config.telephonePlaceholderNumberType,\n      preferredCountries: config.telephonePreferredCountries,\n      separateDialCode: config.telephoneSeparateDialCode,\n      utilsScript:\n        \"https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.19/js/utils.js\",\n    });\n\n    const onCountryChange = () => {\n      const countryData = iti.getSelectedCountryData();\n      setDialCode(countryData.dialCode);\n    };\n\n    onCountryChange();\n    inputRef.current.addEventListener(\"countrychange\", onCountryChange);\n\n    () => {\n      iti.destroy();\n      inputRef.current.removeEventListener(\"countrychange\", onCountryChange);\n    };\n  }, []);\n\n  return (\n    <FormField>\n      <input\n        type=\"tel\"\n        ref={inputRef}\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n        maxLength={maxLength}\n        className=\"form-field__text form-field__telephone\"\n      />\n      <input\n        type=\"hidden\"\n        name={`${name}_dialcode`}\n        value={dialCode}\n        readOnly\n      />\n    </FormField>\n  );\n};\n\nexport default TelephoneField;\n","import { useContext, useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\n\nimport { ConfigContext } from \"./ConfigContext\";\n\ntype UploadFieldProps = {\n  name: string;\n  field: WorkableFormField;\n};\n\nexport const UploadField: React.ComponentType<UploadFieldProps> = ({\n  name,\n  field,\n}) => {\n  const config = useContext(ConfigContext);\n\n  const IS_IMAGE = Boolean(\n    field.supported_file_types.filter((x) =>\n      [\"jpg\", \"jpeg\", \"gif\", \"png\"].includes(x),\n    ).length,\n  );\n\n  const [state, setState] = useState<\n    \"initial\" | \"loading\" | \"error\" | \"success\"\n  >(\"initial\");\n  const [image, setImage] = useState<null | { preview: string; name: string }>(\n    null,\n  );\n  const [message, setMessage] = useState<string>(\"\");\n\n  const [fileBase64, setFileBase64] = useState<string>(\"\");\n  const { acceptedFiles, getRootProps, getInputProps, inputRef } = useDropzone({\n    maxFiles: 1,\n    multiple: false,\n    maxSize: field.max_file_size,\n    accept: {\n      \"application/octet-stream\": field.supported_file_types.map(\n        (ext) => `.${ext}`,\n      ),\n    },\n    onDrop: (acceptedFiles) => {\n      setState(\"loading\");\n\n      if (!acceptedFiles.length) {\n        setMessage(config.labelDropzoneNoFilesAccepted);\n        setState(\"error\");\n        return;\n      }\n\n      acceptedFiles.forEach((file) => {\n        const reader = new FileReader();\n\n        reader.onabort = () => {\n          reset();\n          setMessage(config.labelDropzoneAborted);\n          setState(\"error\");\n        };\n        reader.onerror = () => {\n          reset();\n          setMessage(config.labelDropzoneError);\n          setState(\"error\");\n        };\n        reader.onload = () => {\n          setFileBase64(reader.result.toString().split(\"base64,\")[1]);\n          setState(\"success\");\n        };\n        reader.readAsDataURL(file);\n      });\n\n      setImage(\n        acceptedFiles.map((file) =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          }),\n        )[0],\n      );\n    },\n  });\n\n  const reset = () => {\n    if (image) URL.revokeObjectURL(image.preview);\n    setFileBase64(\"\");\n  };\n\n  useEffect(() => {\n    // Make sure to revoke the data uris to avoid memory leaks, will run on unmount\n    return () => reset();\n  }, []);\n\n  const onClear = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    acceptedFiles.length = 0;\n    acceptedFiles.splice(0, acceptedFiles.length);\n    inputRef.current.value = \"\";\n    setImage(null);\n    setState(\"initial\");\n    setMessage(\"\");\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        data-action=\"remove-entry\"\n        onClick={onClear}\n        style={{ display: \"none\" }}\n      />\n      <div {...getRootProps({ className: \"dropzone\" })} data-state={state}>\n        <input {...getInputProps()} />\n        <textarea\n          name={name}\n          style={{ display: \"none\" }}\n          data-filename={acceptedFiles?.[0]?.name}\n          value={fileBase64}\n          readOnly\n        />\n\n        {acceptedFiles.length > 0 ? (\n          <>\n            {IS_IMAGE && image && (\n              <img\n                style={{\n                  maxWidth: 240,\n                }}\n                key={image.name}\n                src={image.preview}\n                onLoad={() => {\n                  URL.revokeObjectURL(image.preview);\n                }}\n              />\n            )}\n            {!IS_IMAGE &&\n              acceptedFiles.map((file) => <p key={file.name}>{file.name}</p>)}\n            <p className=\"dropzone__label\">\n              <span>{config.labelDropzoneReplaceFile}</span>{\" \"}\n              {config.labelDropzoneDragDrop}\n            </p>\n          </>\n        ) : (\n          <>\n            <p className=\"dropzone__label\">\n              <span>{config.labelDropzoneUpload}</span>{\" \"}\n              {config.labelDropzoneDragDrop}\n            </p>\n            <p className=\"dropzone__info\">\n              {field.max_file_size &&\n                `${config.labelDropzoneMaxSize} ${Math.floor(\n                  field.max_file_size / 1000000,\n                )}Mb. Acceptable file types .\n              ${field.supported_file_types.join(\", .\")}.`}\n            </p>\n          </>\n        )}\n\n        {state === \"loading\" && (\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <style\n              dangerouslySetInnerHTML={{\n                __html: `\n                .spinner_b2T7{animation:spinner_xe7Q .8s linear infinite}.spinner_YRVV{animation-delay:-.65s}.spinner_c9oY{animation-delay:-.5s}@keyframes spinner_xe7Q{93.75%,100%{r:3px}46.875%{r:.2px}}`,\n              }}\n            />\n            <circle className=\"spinner_b2T7\" cx=\"4\" cy=\"12\" r=\"3\" />\n            <circle\n              className=\"spinner_b2T7 spinner_YRVV\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"3\"\n            />\n            <circle\n              className=\"spinner_b2T7 spinner_c9oY\"\n              cx=\"20\"\n              cy=\"12\"\n              r=\"3\"\n            />\n          </svg>\n        )}\n\n        {message && <p className=\"dropzone__message\">{message}</p>}\n      </div>\n    </>\n  );\n};\n\nexport default UploadField;\n","import { useContext, useReducer, useRef, useState } from \"react\";\nimport { Field } from \"./Field\";\nimport { ConfigContext } from \"./ConfigContext\";\nimport * as Dialog from \"@radix-ui/react-dialog\";\nimport * as VisuallyHidden from \"@radix-ui/react-visually-hidden\";\nimport { Fieldset } from \"./Fieldset\";\nimport { Button } from \"./Button\";\n\ntype ComplexMultipleProps = {\n  name: string;\n  field: WorkableFormField;\n};\n\ntype ActionType = {\n  id: string;\n  type: \"add\" | \"remove\" | \"edit\";\n  data?: Record<string, FieldValueType>;\n};\n\ntype FieldValueType = {\n  key: string;\n  value: string;\n  label: string;\n};\n\nexport const ComplexMultiple: React.ComponentType<ComplexMultipleProps> = ({\n  name,\n  field,\n}) => {\n  const config = useContext(ConfigContext);\n  const [state, setState] = useState<\"initial\" | \"dialog\">(\"initial\");\n\n  const formRef = useRef<HTMLFormElement>(null);\n\n  const hiddenValueFieldRef = useRef<HTMLInputElement>(null);\n  const [editingEntryId, setEditingEntryId] = useState<string | null>(null);\n\n  const entryId = useRef<number>(0);\n\n  /**\n   * entries is an array of objects that looks like this:\n   * [{\n   *  id: \"entry-1\",\n   *  type: \"add\",\n   *  data: {\n   *  \"entry-1\": {\n   *    key: \"firstname\",\n   *    value: \"John\",\n   *    label: \"First Name\"\n   * }]\n   */\n\n  const [entries, updateEntries] = useReducer((data, action: ActionType) => {\n    const index = data.findIndex(({ id }) => id === action.id);\n    let newData = [...data];\n\n    switch (action.type) {\n      case \"add\":\n        return [...data, action];\n\n      case \"remove\":\n        newData.splice(index, 1);\n        return newData;\n\n      case \"edit\":\n        newData.splice(index, 1, action);\n        return newData;\n    }\n  }, []);\n\n  /**\n   * Save when the 'save' button is clicked\n   * it can either be a 'save' or an 'edit' action\n   */\n\n  const onSave = () => {\n    if (!hiddenValueFieldRef.current) return;\n    if (!formRef) return;\n\n    const formData = new FormData(formRef.current);\n    const data = Object.fromEntries(formData.entries());\n\n    const action: ActionType = !editingEntryId\n      ? {\n          id: `entry-${++entryId.current}`,\n          type: \"add\",\n          data: {},\n        }\n      : {\n          id: editingEntryId,\n          type: \"edit\",\n          data: {},\n        };\n\n    Object.entries(data).forEach(([key, value]: [string, string]) => {\n      const matchingField = field.fields.find((f) => f.key === key);\n\n      if (!value.trim().length) return;\n      action.data[key] = {\n        key: key,\n        value,\n        label: matchingField.label,\n      };\n    });\n    updateEntries(action);\n    setState(\"initial\");\n    setEditingEntryId(null);\n  };\n\n  return (\n    <>\n      <input\n        type=\"hidden\"\n        name={name}\n        value={JSON.stringify(entries)}\n        ref={hiddenValueFieldRef}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          updateEntries(JSON.parse(e.target.value))\n        }\n      />\n      {Boolean(entries.length) && (\n        <div className=\"complex-multiple__entries\">\n          {(entries as ActionType[]).map((entry) => {\n            return (\n              <div key={entry.id} className=\"complex-multiple__entry\">\n                <table className=\"complex-multiple__entry-table\">\n                  <tbody>\n                    {Object.entries(entry.data).map(\n                      ([key, value]: [string, FieldValueType]) => (\n                        <tr key={key}>\n                          <th>{value.label}</th>\n                          {value.value === \"on\" ? (\n                            <td>{config.iconCheck()}</td>\n                          ) : (\n                            <td>{value.value}</td>\n                          )}\n                        </tr>\n                      ),\n                    )}\n                  </tbody>\n                </table>\n\n                <div className=\"complex-multiple__entry-actions\">\n                  <Button\n                    type=\"button\"\n                    theme=\"ghost\"\n                    onClick={() => {\n                      setEditingEntryId(entry.id);\n                      setState(\"dialog\");\n                    }}\n                  >\n                    {config.iconEdit()}\n                    <VisuallyHidden.Root>\n                      {config.labelEdit}\n                    </VisuallyHidden.Root>\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    theme=\"ghost\"\n                    data-action=\"remove-entry\"\n                    onClick={() =>\n                      updateEntries({\n                        id: entry.id,\n                        type: \"remove\",\n                      })\n                    }\n                  >\n                    {config.iconDelete()}\n                    <VisuallyHidden.Root>\n                      {config.labelDelete}\n                    </VisuallyHidden.Root>\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      <div className=\"complex-multiple__add\">\n        <Button type=\"button\" onClick={() => setState(\"dialog\")}>\n          {config.labelAdd}\n        </Button>\n      </div>\n\n      <Dialog.Root open={state === \"dialog\"}>\n        <Dialog.Portal>\n          <Dialog.Overlay className=\"dialog-overlay\" />\n          <Dialog.Content\n            className=\"dialog-content application-form-dialog\"\n            onEscapeKeyDown={() => setState(\"initial\")}\n            onPointerDownOutside={() => setState(\"initial\")}\n            onInteractOutside={() => setState(\"initial\")}\n          >\n            <div className=\"dialog-content__form\">\n              <VisuallyHidden.Root asChild>\n                <Dialog.Title className=\"dialog-title\">\n                  {editingEntryId ? config.labelEdit : config.labelAdd}\n                </Dialog.Title>\n              </VisuallyHidden.Root>\n\n              <Button\n                aria-label={config.labelClose}\n                onClick={() => setState(\"initial\")}\n                theme=\"tertiary\"\n                className=\"dialog-content__close\"\n              >\n                {config.iconCancel()}\n              </Button>\n\n              <form className=\"complex-multiple__form\" ref={formRef}>\n                <Fieldset name={field.label} displayClearButton={false}>\n                  {field.fields.map((subfield) => {\n                    const editingEntry = {\n                      ...entries.find(({ id }) => id === editingEntryId),\n                    };\n                    return (\n                      <Field\n                        key={subfield.key}\n                        name={subfield.key}\n                        field={{\n                          ...subfield,\n                          name: subfield.key,\n                          label: subfield.label,\n                          slug: subfield.key,\n                          value:\n                            editingEntryId && editingEntry\n                              ? editingEntry.data[subfield.key]?.value\n                              : null,\n                        }}\n                      />\n                    );\n                  })}\n\n                  <div className=\"button-row\">\n                    <Button type=\"button\" onClick={() => onSave()}>\n                      {config.labelSave}\n                    </Button>\n\n                    <Button\n                      type=\"button\"\n                      theme=\"tertiary\"\n                      onClick={() => {\n                        setEditingEntryId(null);\n                        setState(\"initial\");\n                      }}\n                    >\n                      {config.labelCancel}\n                    </Button>\n                  </div>\n                </Fieldset>\n              </form>\n            </div>\n          </Dialog.Content>\n        </Dialog.Portal>\n      </Dialog.Root>\n    </>\n  );\n};\n\nexport default ComplexMultiple;\n","import { useContext, useRef } from \"react\";\nimport { Button } from \"./Button\";\nimport { ConfigContext } from \"./ConfigContext\";\n\ntype FieldsetProps = {\n  name?: string;\n  children: React.ReactNode;\n  displayClearButton?: boolean;\n};\nexport const Fieldset: React.ComponentType<FieldsetProps> = ({\n  name,\n  children,\n  displayClearButton = true,\n}) => {\n  const config = useContext(ConfigContext);\n  const fieldsetRef = useRef(null);\n\n  const onClear = () => {\n    const inputs = fieldsetRef.current.querySelectorAll(\n      \"input, textarea, select\",\n    );\n\n    inputs.forEach((input) => {\n      if (input.type === \"checkbox\" || input.type === \"radio\") {\n        input.checked = false;\n      } else {\n        input.value = \"\";\n      }\n      input.dispatchEvent(new Event(\"change\"));\n    });\n\n    const removeComplexMultipleEntries = fieldsetRef.current.querySelectorAll(\n      '[data-action=\"remove-entry\"]',\n    );\n    removeComplexMultipleEntries.forEach((button) => {\n      button.click();\n    });\n  };\n\n  return (\n    <fieldset className=\"form-fieldset\" ref={fieldsetRef}>\n      {name && (\n        <legend className=\"form-legend\">\n          <span className=\"form-legend__title\">{name}</span>\n          {displayClearButton && (\n            <span className=\"form-legend__clear\">\n              <Button type=\"button\" theme=\"ghost\" onClick={onClear}>\n                {config.iconClear()}\n                {config.labelClear}\n              </Button>\n            </span>\n          )}\n        </legend>\n      )}\n      {children}\n    </fieldset>\n  );\n};\n","type ButtonProps = {\n  onClick?: () => void;\n  theme?: \"primary\" | \"secondary\" | \"tertiary\" | \"ghost\";\n  type?: \"button\" | \"submit\" | \"reset\";\n  children?: React.ReactNode;\n  style?: React.CSSProperties;\n  size?: \"md\" | \"lg\";\n  disabled?: boolean;\n  className?: string;\n};\n\nexport const Button: React.ComponentType<ButtonProps> = ({\n  onClick,\n  theme = \"primary\",\n  type = \"button\",\n  size = \"md\",\n  children,\n  style,\n  disabled,\n  className = \"\",\n  ...props\n}) => {\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      className={`button button--${theme} button--${size} button--${\n        disabled ? \"disabled\" : \"enabled\"\n      } ${className}`}\n      style={style}\n      disabled={disabled}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n","import { FormField } from \"./FormField\";\n\ntype SelectFieldProps = FormFieldType;\n\nexport const SelectField: React.ComponentType<SelectFieldProps> = ({\n  name,\n  required,\n  id,\n  defaultValue,\n  choices,\n}) => {\n  return (\n    <FormField>\n      <select\n        className=\"form-field__select\"\n        name={name}\n        required={required}\n        id={id}\n        defaultValue={defaultValue}\n      >\n        <option value={null}></option>\n        {choices?.map((choice) => {\n          return (\n            <option key={choice.id} value={choice.id}>\n              {choice.body}\n            </option>\n          );\n        })}\n      </select>\n    </FormField>\n  );\n};\n","type ChoiceFieldProps = { multiple?: boolean } & FormFieldType;\n\nexport const ChoiceField: React.ComponentType<ChoiceFieldProps> = ({\n  name,\n  required,\n  id,\n  choices,\n  multiple,\n}) => {\n  return (\n    <fieldset className=\"form-field__choice-fieldset\">\n      {choices?.map((choice) => {\n        return (\n          <div className=\"form-field__choice-wrapper\" key={choice.id}>\n            <input\n              type={multiple ? \"checkbox\" : \"radio\"}\n              name={name}\n              id={`${id}${choice.id}`}\n              value={choice.id}\n              className=\"form-field__choice\"\n            />\n            <label htmlFor={`${id}${choice.id}`}>{choice.body}</label>\n          </div>\n        );\n      })}\n    </fieldset>\n  );\n};\n","type ButtonRowProps = {\n  children?: React.ReactNode;\n};\n\nexport const ButtonRow: React.ComponentType<ButtonRowProps> = ({\n  children,\n}) => {\n  return <div className=\"button-row\">{children}</div>;\n};\n","import React = require(\"react\");\n\nimport { ConfigContext } from \"./ConfigContext\";\nimport { Heading } from \"./Heading\";\n\ntype FormProps = {\n  children: React.ReactNode;\n  onSubmit(\n    event: React.FormEvent<HTMLFormElement>,\n    cb: (error: string | null) => void,\n  ): void;\n};\n\nexport const Form: React.ComponentType<FormProps> = ({\n  children,\n  onSubmit,\n}) => {\n  const [state, setState] = React.useState<\n    \"initial\" | \"saving\" | \"error\" | \"complete\"\n  >(\"initial\");\n\n  const [error, setError] = React.useState<string | null>(null);\n  const config = React.useContext(ConfigContext);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    setState(\"saving\");\n    setError(null);\n    onSubmit(event, (error: string | null) => {\n      if (error) {\n        setError(error);\n        setState(\"error\");\n      } else {\n        setState(\"complete\");\n      }\n    });\n  };\n\n  return (\n    <form\n      className={`form--${state}`}\n      onSubmit={handleSubmit}\n      encType=\"multipart/form-data\"\n    >\n      {config.labelForm && <Heading as=\"h1\">{config.labelForm}</Heading>}\n      {children}\n      <p\n        className={`form__error ${error ? \"enabled\" : \"disabled\"}`}\n        onClick={() => setError(null)}\n      >\n        {error}\n      </p>\n    </form>\n  );\n};\n","type HeadingProps = {\n  children?: React.ReactNode;\n  as?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n};\n\nexport const Heading: React.ComponentType<HeadingProps> = ({\n  children,\n  as = \"h2\",\n}) => {\n  const Element = as;\n  return <Element className={`heading heading--${as}`}>{children}</Element>;\n};\n","/**\n * Clean form data\n * - checkboxes are stored as \"on\" or \"off\"\n * - complex fields are stored as json\n */\n\nexport const cleanFormData = (data: any) => {\n  const cleanedData: any = {};\n  Object.keys(data).forEach((key) => {\n    let value = data[key];\n\n    // parse complex fields that are already stored as json\n    try {\n      value = JSON.parse(value);\n    } catch (e) {}\n\n    // arrays\n    if (Array.isArray(value)) {\n      cleanedData[key] = value.map((item) => {\n        if (typeof item === \"object\" && item !== null) {\n          if (\"value\" in value) {\n            return cleanValue(value.value);\n          }\n\n          if (\"data\" in item) {\n            const cleanedData: any = {};\n            Object.keys(item.data).forEach((key) => {\n              cleanedData[key] = cleanValue(item.data[key].value);\n            });\n            return cleanedData;\n          }\n\n          return cleanFormData(item);\n        }\n        return cleanValue(item);\n      });\n      return;\n    }\n\n    cleanedData[key] = cleanValue(value);\n  });\n\n  return cleanedData;\n};\n\n/**\n * Clean value\n * - empty values are removed\n * - checkboxes are stored as boolean\n */\n\nexport const cleanValue = (value: any) => {\n  // empty values\n  if (typeof value === \"string\" && value.trim().length === 0) {\n    return;\n  }\n\n  // checkboxes\n  if (value === \"on\" || value === \"off\") {\n    return value === \"on\" ? true : false;\n  }\n\n  return value;\n};\n\n/**\n * Create workable candidate from form data\n * based on field types in formFields and questions\n */\n\nexport const createWorkableCandidate = (\n  data: any,\n  formFields: WorkableFormField[],\n  questions: WorkableQuestion[],\n) => {\n  const candidate: WorkableCandidate = {\n    name: data.name,\n    firstname: data.firstname,\n    lastname: data.lastname,\n    email: data.email,\n    headline: data.headline,\n    summary: data.summary,\n    address: data.address,\n    avatar: data.avatar,\n    phone: data.phone ? `+${data.phone_dialcode}${data.phone}` : undefined,\n    cover_letter: data.cover_letter,\n    education_entries: data.education,\n    experience_entries: data.experience,\n    answers: [],\n    skills: data.skills,\n    tags: data.tags,\n    disqualified: data.disqualified,\n    disqualification_reason: data.disqualification_reason,\n    disqualified_at: data.disqualified_at,\n    social_profiles: data.social_profiles,\n    domain: data.domain,\n    recruiter_key: data.recruiter_key,\n  };\n\n  // find form fields that are not yet in the object\n  const missingFields = formFields.filter(\n    (field) => !Object.keys(candidate).includes(field.key),\n  );\n\n  // add answers\n  missingFields.forEach((question) => {\n    const value = data[question.key];\n\n    if (value) {\n      // \"string\" | \"free_text\" | \"file\" | \"boolean\" | \"date\" | \"complex\"\n      switch (question.type) {\n        case \"string\":\n          const stringAnswer: WorkableAnswerFreeText = {\n            question_key: question.key,\n            body: value,\n          };\n          candidate.answers.push(stringAnswer);\n          break;\n\n        case \"free_text\":\n          const freetextAnswer: WorkableAnswerFreeText = {\n            question_key: question.key,\n            body: value,\n          };\n          candidate.answers.push(freetextAnswer);\n          break;\n\n        case \"boolean\":\n          const booleanAnswer: WorkableAnswerBoolean = {\n            question_key: question.key,\n            checked: value,\n          };\n          candidate.answers.push(booleanAnswer);\n          break;\n\n        case \"date\":\n          const dateAnswer: WorkableAnswerDate = {\n            question_key: question.key,\n            date: value,\n          };\n          candidate.answers.push(dateAnswer);\n          break;\n\n        case \"file\":\n          const fileAnswer: WorkableAnswerFileData = {\n            question_key: question.key,\n            name: question.key,\n            file_url: \"https://faces-img.xcdn.link/image-lorem-face-4053.jpg\",\n            // file: {\n            //   name: question.key,\n            //   data: value,\n            // },\n          };\n          candidate.answers.push(fileAnswer);\n          break;\n\n        // not covering the complex case here, as experience and education are handled separately\n      }\n    }\n  });\n\n  // find questions that are not yet in the object\n  const missingQuestions = questions.filter(\n    (question) => !Object.keys(candidate).includes(question.id),\n  );\n\n  // add answers;\n  missingQuestions.forEach((question) => {\n    const value = data[question.id];\n\n    if (value) {\n      // \"short_text\" | \"free_text\" | \"multiple_choice\" | \"boolean\" | \"dropdown\" | \"numeric\" | \"date\" | \"file\";\n      switch (question.type) {\n        case \"short_text\":\n          const shortTextAnswer: WorkableAnswerShortText = {\n            question_key: question.id,\n            body: value,\n          };\n          candidate.answers.push(shortTextAnswer);\n          break;\n        case \"free_text\":\n          const freetextAnswer: WorkableAnswerFreeText = {\n            question_key: question.id,\n            body: value,\n          };\n          candidate.answers.push(freetextAnswer);\n          break;\n\n        case \"multiple_choice\":\n          const multipleChoiceAnswer: WorkableAnswerMultipleChoice = {\n            question_key: question.id,\n            choices: value,\n          };\n          candidate.answers.push(multipleChoiceAnswer);\n          break;\n\n        case \"boolean\":\n          const booleanAnswer: WorkableAnswerBoolean = {\n            question_key: question.id,\n            checked: value,\n          };\n          candidate.answers.push(booleanAnswer);\n          break;\n\n        case \"dropdown\":\n          const dropdownAnswer: WorkableAnswerDropdown = {\n            question_key: question.id,\n            choices: value,\n          };\n          candidate.answers.push(dropdownAnswer);\n          break;\n\n        case \"date\":\n          const dateAnswer: WorkableAnswerDate = {\n            question_key: question.id,\n            date: value,\n          };\n          candidate.answers.push(dateAnswer);\n          break;\n\n        case \"numeric\":\n          const numericAnswer: WorkableAnswerNumeric = {\n            question_key: question.id,\n            value: +value,\n          };\n          candidate.answers.push(numericAnswer);\n          break;\n\n        case \"file\":\n          const fileAnswer: WorkableAnswerFileData = {\n            question_key: question.id,\n            file_url: \"https://faces-img.xcdn.link/image-lorem-face-4053.jpg\",\n            // file: {\n            //   name: question.id,\n            //   data: value,\n            // },\n          };\n          candidate.answers.push(fileAnswer);\n          break;\n      }\n    }\n  });\n\n  // remove undefined values\n  Object.keys(candidate).forEach((key) =>\n    candidate[key] === undefined ? delete candidate[key] : {},\n  );\n\n  return candidate;\n};\n"],"names":[],"version":3,"file":"modern.main.js.map"}